/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2013, SRI International
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of SRI International nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Sachin Chitta */

#include <moveit/move_group_interface/move_group.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

int main(int argc, char **argv)
{
  ros::init(argc, argv, "move_group_interface_tutorial");
  ros::NodeHandle node_handle;  
  ros::AsyncSpinner spinner(1);
  spinner.start();


 // 这个睡眠只允许Rviz来
  sleep(20.0);
  
  // 类  控制的手臂
  moveit::planning_interface::MoveGroup group("right_arm");

  // 我们将使用：planning_scene_interface：“PlanningSceneInterface”类直接处理世界。
  moveit::planning_interface::PlanningSceneInterface planning_scene_interface;  

  // （可选）创建发布商以在Rviz中显示计划。
  ros::Publisher display_publisher = node_handle.advertise<moveit_msgs::DisplayTrajectory>("/move_group/display_planned_path", 1, true);
  moveit_msgs::DisplayTrajectory display_trajectory;

  //打印这个机器人的参考框架的名称。 
  ROS_INFO("Reference frame: %s", group.getPlanningFrame().c_str());
  
  // 打印此组的末端效应器链接的名称。
  ROS_INFO("Reference frame: %s", group.getEndEffectorLink().c_str());

  // 规划末端执行器想要的姿势
  geometry_msgs::Pose target_pose1;
  target_pose1.orientation.w = 1.0;
  target_pose1.position.x = 0.28;
  target_pose1.position.y = -0.7;
  target_pose1.position.z = 1.0;
  group.setPoseTarget(target_pose1);


  // 现在，我们称计划者计算出计划
   //并可视化。
   //请注意，我们只是计划，不要求move_group
   //实际移动机器人。
  moveit::planning_interface::MoveGroup::Plan my_plan;
  bool success = group.plan(my_plan);

  ROS_INFO("Visualizing plan 1 (pose goal) %s",success?"":"FAILED");    
  /* Sleep to give Rviz time to visualize the plan. */
  sleep(5.0);

 //可视化计划
   // ^^^^^^^^^^^^^^^^^
   //现在我们有一个计划，我们可以在Rviz中显示它。 这不是
   //必需的，因为我们上面做的group.plan（）调用了这个
   //自动。 但是，在我们的情况下，明确发布计划是有用的
   //想可视化以前创建的计划。
  if (1)
  {
    ROS_INFO("Visualizing plan 1 (again)");    
    display_trajectory.trajectory_start = my_plan.start_state_;
    display_trajectory.trajectory.push_back(my_plan.trajectory_);
    display_publisher.publish(display_trajectory);
    /* Sleep to give Rviz time to visualize the plan. */
    sleep(5.0);
  }
  
  //移动到一个姿势目标
   // ^^^^^^^^^^^^^^^^^^^^^
  //
   //移动到一个姿势的目标是类似于上面的步骤
   //除了我们现在使用move（）函数。 注意
   //我们早先设置的姿态目标仍然很活跃
   //所以机器人会试图移动到这个目标。 我们会
   //在本教程中不使用该函数，因为它是
   //一个阻塞功能，并要求控制器处于活动状态
   //并报告执行轨迹的成功。
 
   // *在使用真实的机器人时，取消注释下方的注释* /
  //  group.move（）

   //规划联合空间目标
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  //
   //让我们设定一个联合的空间目标并向着它移动。 这将取代
   //我们设置的姿态目标
  //
   //首先获取组的当前联合值集合。

  std::vector<double> group_variable_values;
  group.getCurrentState()->copyJointGroupPositions(group.getCurrentState()->getRobotModel()->getJointModelGroup(group.getName()), group_variable_values);
  
 //现在，我们修改一个关节，计划到新关节
   //空间目标和可视化计划。
  group_variable_values[0] = -1.0;  
  group.setJointValueTarget(group_variable_values);
  success = group.plan(my_plan);

  ROS_INFO("Visualizing plan 2 (joint space goal) %s",success?"":"FAILED");
  /* Sleep to give Rviz time to visualize the plan. */
  sleep(5.0);

 //使用路径约束进行规划
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  //
   //可以轻松地为机器人上的链接指定路径约束。
   //我们为我们的组指定路径约束和姿势目标。
   //首先定义路径约束。
  moveit_msgs::OrientationConstraint ocm;  
  ocm.link_name = "r_wrist_roll_link";  
  ocm.header.frame_id = "base_link";
  ocm.orientation.w = 1.0;
  ocm.absolute_x_axis_tolerance = 0.1;
  ocm.absolute_y_axis_tolerance = 0.1;
  ocm.absolute_z_axis_tolerance = 0.1;
  ocm.weight = 1.0;
  
 //现在，将其设置为组的路径约束。
  moveit_msgs::Constraints test_constraints;
  test_constraints.orientation_constraints.push_back(ocm);  
  group.setPathConstraints(test_constraints);
//我们将重用我们已经和计划的旧目标。
   //请注意，只有当前状态已经有效
   //满足路径约束。 所以，我们需要设定开始
   //状态到一个新的姿势。
  robot_state::RobotState start_state(*group.getCurrentState());
  geometry_msgs::Pose start_pose2;
  start_pose2.orientation.w = 1.0;
  start_pose2.position.x = 0.55;
  start_pose2.position.y = -0.05;
  start_pose2.position.z = 0.8;
  const robot_state::JointModelGroup *joint_model_group =
                  start_state.getJointModelGroup(group.getName());
  start_state.setFromIK(joint_model_group, start_pose2);
  group.setStartState(start_state);
  
//现在我们将计划从新的更早的姿势目标
   //我们刚刚创建的开始状态
  group.setPoseTarget(target_pose1);
  success = group.plan(my_plan);

  ROS_INFO("Visualizing plan 3 (constraints) %s",success?"":"FAILED");
  /* Sleep to give Rviz time to visualize the plan. */
  sleep(10.0);

  // When done with the path constraint be sure to clear it.
  group.clearPathConstraints();
//笛卡尔路径
   // ^^^^^^^^^^^^^^^
   //您可以通过指定路点列表直接计划笛卡尔路径
   //为了终端执行器通过。 请注意，我们正在开始
   //从上面的新开始状态。 初始姿态（开始状态）不起作用
   //需要添加到航点列表。
  std::vector<geometry_msgs::Pose> waypoints;

  geometry_msgs::Pose target_pose3 = start_pose2;
  target_pose3.position.x += 0.2;
  target_pose3.position.z += 0.2;
  waypoints.push_back(target_pose3);  // up and out

  target_pose3.position.y -= 0.2;
  waypoints.push_back(target_pose3);  // left

  target_pose3.position.z -= 0.2;
  target_pose3.position.y += 0.2;
  target_pose3.position.x -= 0.2;
  waypoints.push_back(target_pose3);  // down and right (back to start)

//我们希望笛卡尔路径以1厘米的分辨率插值
   //这是为什么我们将指定0.01作为笛卡尔的最大步长
   //翻译。 我们将有效地将跳转阈值指定为0.0
   //禁用它
  moveit_msgs::RobotTrajectory trajectory;
  double fraction = group.computeCartesianPath(waypoints,
                                               0.01,  // eef_step
                                               0.0,   // jump_threshold
                                               trajectory);

  ROS_INFO("Visualizing plan 4 (cartesian path) (%.2f%% acheived)",
        fraction * 100.0);    
  /* Sleep to give Rviz time to visualize the plan. */
  sleep(15.0);

//添加/删除对象并附加/分离对象
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   //首先，我们将定义碰撞对象消息。
  moveit_msgs::CollisionObject collision_object;
  collision_object.header.frame_id = group.getPlanningFrame();

  /* The id of the object is used to identify it. */
  collision_object.id = "box1";

  /* Define a box to add to the world. */
  shape_msgs::SolidPrimitive primitive;
  primitive.type = primitive.BOX;
  primitive.dimensions.resize(3);
  primitive.dimensions[0] = 0.4;
  primitive.dimensions[1] = 0.1;
  primitive.dimensions[2] = 0.4;

// *框的姿势（相对于frame_id指定）* /
  geometry_msgs::Pose box_pose;
  box_pose.orientation.w = 1.0;
  box_pose.position.x =  0.6;
  box_pose.position.y = -0.4;
  box_pose.position.z =  1.2;

  collision_object.primitives.push_back(primitive);
  collision_object.primitive_poses.push_back(box_pose);
  collision_object.operation = collision_object.ADD;

  std::vector<moveit_msgs::CollisionObject> collision_objects;  
  collision_objects.push_back(collision_object);  

  // Now, let's add the collision object into the world
  ROS_INFO("Add an object into the world");  
  planning_scene_interface.addCollisionObjects(collision_objects);
  
  /* Sleep so we have time to see the object in RViz */
  sleep(2.0);

//具有碰撞检测的规划可能很慢。 让我们设定计划时间//以确保计划者有足够的时间来计划箱子。 10秒//应该很多
  group.setPlanningTime(10.0);


 //现在，当我们计划轨迹时，它将避免障碍
  group.setStartState(*group.getCurrentState());
  group.setPoseTarget(target_pose1);
  success = group.plan(my_plan);

  ROS_INFO("Visualizing plan 5 (pose goal move around box) %s",
    success?"":"FAILED");
  /* Sleep to give Rviz time to visualize the plan. */
  sleep(10.0);
  

 //现在，我们将碰撞对象附加到机器人。
  ROS_INFO("Attach the object to the robot");  
  group.attachObject(collision_object.id);  
  /* Sleep to give Rviz time to show the object attached (different color). */
  sleep(4.0);


  //现在，我们将碰撞对象与机器人分离。
  ROS_INFO("Detach the object from the robot");  
  group.detachObject(collision_object.id);  
  /* Sleep to give Rviz time to show the object detached. */
  sleep(4.0);


  // Now, let's remove the collision object from the world.
  ROS_INFO("Remove the object from the world");  
  std::vector<std::string> object_ids;
  object_ids.push_back(collision_object.id);  
  planning_scene_interface.removeCollisionObjects(object_ids);
  /* Sleep to give Rviz time to show the object is no longer there. */
  sleep(4.0);

//双臂姿势目标
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   //首先定义一个新组来寻址两个臂。 然后定义
   //两个单独的姿势目标，一个用于每个末端执行器。 注意
   //我们正在重复上述右臂的目标

  moveit::planning_interface::MoveGroup two_arms_group("arms");

  two_arms_group.setPoseTarget(target_pose1, "r_wrist_roll_link");

  geometry_msgs::Pose target_pose2;
  target_pose2.orientation.w = 1.0;
  target_pose2.position.x = 0.7;
  target_pose2.position.y = 0.15;
  target_pose2.position.z = 1.0;

  two_arms_group.setPoseTarget(target_pose2, "l_wrist_roll_link");

  // Now, we can plan and visualize
  moveit::planning_interface::MoveGroup::Plan two_arms_plan;
  two_arms_group.plan(two_arms_plan);
  sleep(4.0);

// END_TUTORIAL

  ros::shutdown();  
  return 0;
}



在Rviz中，我们应该可以看到以下内容（每个步骤之间将延迟5-10秒）：
机器人将其右臂移动到向右前方的姿势目标。
机器人从1重复相同的动作。
机器人将右臂移动到右侧的联合目标。
机器人将其右臂移回到新的姿势目标，同时保持末端执行器水平。
机器人沿着所需的笛卡尔路径移动其右臂（三角形向上，向前，向左，向下+向后）。
一个框对象被添加到右臂右侧的环境中。乙
机器人将其右臂移动到姿势目标，避免与盒子碰撞。
物体附着在手腕上（其颜色将变为紫色/橙色/绿色）。
物体与腕部分离（其颜色将变回绿色）。
该对象从环境中删除。
